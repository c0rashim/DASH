---
title: "NYCTaxi"
author: "심채연(2018-21971)"
format: dashboard
execute: 
  enabled: true
  cache: false
  freeze: false
  error: false
---

```{python}
#| output: false
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.io as pio

pd.options.plotting.backend = "plotly"
pio.templates.default = "plotly_white"

df = pd.read_csv("https://raw.githubusercontent.com/guebin/DV2023/main/posts/NYCTaxi.csv").assign(
    log_trip_duration = lambda df: np.log(df.trip_duration),
    pickup_datetime = lambda df: df.pickup_datetime.apply(pd.to_datetime),
    dropoff_datetime = lambda df: df.dropoff_datetime.apply(pd.to_datetime),
    dist = lambda df: np.sqrt((df.pickup_latitude-df.dropoff_latitude)**2 + (df.pickup_longitude-df.dropoff_longitude)**2),
#---#
vendor_id = lambda df: df.vendor_id.map({1:'A',2:'B'})
).assign(
    speed = lambda df: df.dist / df.trip_duration,
    pickup_hour = lambda df: df.pickup_datetime.dt.hour,
    dropoff_hour = lambda df: df.dropoff_datetime.dt.hour,
    dayofweek = lambda df: df.pickup_datetime.dt.dayofweek, 
    dayofweek_kr=lambda df: df.pickup_datetime.dt.dayofweek.map(lambda x: {0: '월', 1: '화', 2: '수', 3: '목', 4: '금', 5: '토', 6: '일'}.get(x))
)
df_small = df[::100].reset_index(drop=True)



#### fig1
pivot_table1 = df.pivot_table(values='speed', index='dayofweek_kr', columns='pickup_hour', aggfunc='mean')

fig1 = px.imshow(pivot_table1, labels=dict(color="Average Speed"), x=pivot_table1.columns, y=pivot_table1.index)

fig1.update_layout(
    xaxis_title="요일",
    yaxis_title="탑승 시간",
)


#### fig2
pivot_table2 = df.pivot_table(values='dist', index='dayofweek_kr', columns='pickup_hour', aggfunc='mean')
fig2 = px.imshow(pivot_table2, labels=dict(color="평균 이동거리"), x=pivot_table2.columns, y=pivot_table2.index)

fig2.update_layout(
    xaxis_title="요일",
    yaxis_title="탑승 시간",
)


######
df_small = df_small.assign(speed_quantile=lambda df: pd.qcut(df['speed'], 4, labels=['매우느림', '조금느림', '조금빠름', '매우빠름']))
pcol = ['pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'pickup_hour']
dcol = ['dropoff_datetime', 'dropoff_longitude', 'dropoff_latitude', 'dropoff_hour']
def transform(df):
    pickup = df.loc[:,['id']+pcol].set_axis(['id', 'datetime', 'longitude', 'latitude', 'hour'],axis=1).assign(type = 'pickup')
    dropoff = df.loc[:,['id']+dcol].set_axis(['id', 'datetime', 'longitude', 'latitude', 'hour'],axis=1).assign(type = 'dropoff')
    return pd.concat([pickup,dropoff],axis=0)
df_left = df_small.drop(pcol+dcol,axis=1)
df_right = pd.concat([transform(df) for i, df in df_small.groupby('id')]).reset_index(drop=True)
df_small2 = df_left.merge(df_right)
df_small2.head()
```



# 기말고사1-(1),(2)

```{python}
#| title: 요일,시간에 따른 평균속력 시각화        

fig1.show()
```


```{python}
#| title: 요일,시간에 따른 평균이동거리 시각화        

fig2.show()
```


# 기말고사1-(3)

```{python}
#| title: 속력별 경로 시각화
fig3 = px.line_mapbox(
    data_frame= df_small2,
    lat = 'latitude',
    lon = 'longitude',
    line_group = 'id',
    color = 'speed_quantile',
    #---#
    mapbox_style = 'carto-positron',
    zoom=11
)
scatter_data = px.scatter_mapbox(
    data_frame=df_small2,
    lat = 'latitude',
    lon = 'longitude',
    size = 'passenger_count',
    size_max = 10,
    color = 'speed_quantile',
    #---#
    mapbox_style = 'carto-positron',
    zoom=11
).data 
for sd in scatter_data: 
    fig3.add_trace(sd)
fig3.update_traces(
    line={
        'width':1
    },
    opacity=0.8
)
fig3.show()
```